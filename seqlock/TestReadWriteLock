import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

import ansh.lock.SeqLock.SeqReadLock;

public class TestReadWriteLock {

  public static int elementToProcess = 100000 * 10;
	
	public static void main(String[] args) throws Exception {
		
		if(args.length==0)
		{
			System.out.println("Invalid args.....");
			System.out.println("for eg java type writer reader");
			System.out.println("Type can be javarw or seqrw");
			System.out.println("[only reader ] java javarw 0 4");
			System.out.println("[reader & writer ] java seqrw 1 3");
			return;
		}	
		
		String type = args[0];
		int reader =Integer.parseInt(args[2]);
		int writer = Integer.parseInt(args[1]);
		execute(type, writer, reader);
		
		
	}
	
	
	public static void execute(String type,int writer,int reader) throws InterruptedException, ExecutionException
	{
		ExecutorService es = Executors.newFixedThreadPool(4);
		if(type.equals("javarw"))
		{
			System.out.println("Start Warmup****");
			for(int x=0;x<10;x++)
			{
				addUsingJavaLock(es, reader, writer);			
			}
			System.out.println("End Warmup****");
			
			System.out.println("After Warmup****");
			for(int x=0;x<10;x++)
			{
				addUsingJavaLock(es, reader, writer);			
			}			
		}
		else if(type.equals("seqrw"))
		{
			System.out.println("Start Warmup****");
			for(int x=0;x<10;x++)
			{
				addUsingSeqLock(es, reader, writer);			
			}
			System.out.println("End Warmup****");
			
			System.out.println("After Warmup****");
			for(int x=0;x<10;x++)
			{
				addUsingSeqLock(es, reader, writer);			
			}
		}
		es.shutdown();
	}
	
	
	


	private static void addUsingSeqLock(ExecutorService es, int readers, int writers) throws InterruptedException, ExecutionException {
		Map<Integer,Integer> data = new HashMap<>();
		
		if(writers==0)
		{
			addElements(data);
		}
		
		ReadWriteLock seqLock = new SeqLock(writers==1);		
		List<Future<Void>> ftList = new ArrayList<Future<Void>>();
		
		for(;writers > 0;writers--)
		{
			ftList.add(es.submit(new MapWriter(data, seqLock)));
		}
		
		for(;readers > 0;readers--)
		{
			ftList.add(es.submit(new MapSeqReader(data, seqLock)));
		}
		
		for(Future<Void> f : ftList)
		{
			f.get();
		}
		System.gc();
		
	}
	
	private static void addUsingJavaLock(ExecutorService es, int readers, int writers) throws InterruptedException, ExecutionException {
		Map<Integer,Integer> data = new HashMap<>();
		
		if(writers==0)
		{
			addElements(data);
		}
		
		ReadWriteLock javaLock = new ReentrantReadWriteLock();
		
		List<Future<Void>> ftList = new ArrayList<Future<Void>>();
		
		for(;writers > 0;writers--)
		{
			ftList.add(es.submit(new MapWriter(data, javaLock)));
		}
		
		for(;readers > 0;readers--)
		{
			ftList.add(es.submit(new MapJavaReader(data, javaLock)));
		}
		
		for(Future<Void> f : ftList)
		{
			f.get();
		}
		System.gc();
		
	}
	
	public static class MapWriter implements Callable<Void>
	{
		Map<Integer,Integer> data;
		ReadWriteLock seqLock;
		public MapWriter(Map<Integer, Integer> data,ReadWriteLock seqLock) {
			this.data = data;
			this.seqLock = seqLock;
		}

		@Override
		public Void call() throws Exception {
			long start = System.nanoTime();
			Lock lock = seqLock.writeLock();
			for(int x=0;x<elementToProcess;x++)
			{
				lock.lock();
				data.put(x, x);
				lock.unlock();
			}
			long totalTime = System.nanoTime() - start;
					
			System.out.println(String.format("[%s] ms:%s , op/sec:%s",lock.getClass().getSimpleName() ,TimeUnit.NANOSECONDS.toMillis(totalTime),TimeUnit.SECONDS.toNanos(elementToProcess)/totalTime  ));
			
			return null;
		}
		
	}
	
	
	public static class MapSeqReader implements Callable<Void>
	{
		Map<Integer,Integer> data = new HashMap<>();
		ReadWriteLock seqLock;
		public MapSeqReader(Map<Integer, Integer> data,ReadWriteLock seqLock) {
			this.data = data;
			this.seqLock = seqLock;
		}

		@Override
		public Void call() throws Exception {
			SeqReadLock lock = (SeqReadLock)seqLock.readLock();
			long start = System.nanoTime();
			for(int x=0;x<elementToProcess;)
			{
				long v = lock.tryReadLock();
				data.get(x);
				if(lock.retryReadLock(v))
					x++;
			}
			long totalTime = System.nanoTime() - start;
			
			System.out.println(String.format("[%s] ms:%s , op/sec:%s",lock.getClass().getSimpleName() ,TimeUnit.NANOSECONDS.toMillis(totalTime),TimeUnit.SECONDS.toNanos(elementToProcess)/totalTime  ));
			return null;
		}
		
	}
	
	
	public static class MapJavaReader implements Callable<Void>
	{
		Map<Integer,Integer> data;
		ReadWriteLock seqLock;
		public MapJavaReader(Map<Integer, Integer> data,ReadWriteLock seqLock) {
			this.data = data;
			this.seqLock = seqLock;
		}

		@Override
		public Void call() throws Exception {
			Lock lock = seqLock.readLock();
			long start = System.nanoTime();
			for(int x=0;x<elementToProcess;x++)
			{
				lock.lock();
				data.get(x);
				lock.unlock();
			}
			long totalTime = System.nanoTime() - start;
			
			System.out.println(String.format("[%s] ms:%s , op/sec:%s",lock.getClass().getSimpleName() ,TimeUnit.NANOSECONDS.toMillis(totalTime),TimeUnit.SECONDS.toNanos(elementToProcess)/totalTime  ));
			
			return null;
		}
		
	}
	
	private static void addElements(Map<Integer,Integer> data)
	{
		for(int x=0;x<elementToProcess;x++)
		{
			data.put(x, x);			
		}
	}

}
